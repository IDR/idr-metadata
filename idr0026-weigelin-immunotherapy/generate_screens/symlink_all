#!/usr/bin/env python

"""\
Symlink all image files. Link names replace the .ome.tif
extension with .tif (most of them have no ome-xml, and those who do
get the dimensions wrong) and drop the second (redundant) channel info
element.

Relative link paths will be created under the provided root directory
starting from the "treatment*" part.
"""

import sys
import os
import errno
from argparse import ArgumentParser

from common import ROOT, get_data_dirs


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST:
            pass
        else:
            raise


def parse_cl(argv):
    parser = ArgumentParser(description=__doc__)
    parser.add_argument("target_root", metavar="TARGET_ROOT",
                        help="root directory for the symlinked dataset")
    return parser.parse_args(argv[1:])


def main(argv):
    args = parse_cl(argv)
    data_dirs = get_data_dirs()
    root_depth = len(ROOT.split("/"))
    for source_dir in data_dirs:
        print "generating links for:", source_dir
        rel_dir = source_dir.split("/", root_depth)[-1]
        target_dir = os.path.join(args.target_root, rel_dir)
        mkdir_p(target_dir)
        for bn in os.listdir(source_dir):
            if not bn.endswith(".ome.tif"):
                continue
            noext = bn.rsplit(".", 2)[0]
            head, _, tail = noext.rsplit("_", 2)
            target_bn = "%s_%s.tif" % (head, tail)
            link_name = os.path.join(target_dir, target_bn)
            source = os.path.join(source_dir, bn)
            try:
                os.symlink(source, link_name)
            except OSError as e:
                if e.errno != errno.EEXIST:
                    raise


if __name__ == "__main__":
    main(sys.argv)

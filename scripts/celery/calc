#!/usr/bin/env python

"""\
Run a pydoop-features calc job on Celery.

Any arguments after '--' will be passed to pyfeatures calc.

Example: ./calc
  -u 13500 -v /uod/idr:/uod/idr:ro -o /home/idr-scratch/szleo/out
  /uod/idr/homes/szleo/features/idr0009-simpson-secretion/screenA/input --
  -l -W 168 -H 128

Assumes an input directory with one subdirectory (containing the Avro
input files) per plate.
"""

import sys
import os
import argparse
import importlib
import errno


def iter_input(input_dir):
    for subdir_bn in os.listdir(input_dir):
        path = os.path.join(input_dir, subdir_bn)
        try:
            basenames = os.listdir(path)
        except OSError as e:
            if e.errno == errno.ENOTDIR:
                pass
        for avro_bn in basenames:
            if avro_bn.endswith(".avro"):
                yield subdir_bn, avro_bn


def make_parser():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('input_dir', metavar="DIR", help="input dir")
    parser.add_argument("-o", "--out-dir", metavar="DIR", help="output dir",
                        default=os.getcwd())
    parser.add_argument("-u", "--user-id", type=int, help="run-as user id")
    parser.add_argument("-m", "--celery-module", help="celery app module",
                        default="tasks")
    parser.add_argument("-l", "--log", help="log task ids to this file",
                        default="taskid-calc.log")
    parser.add_argument("-i", "--docker-img", help="docker image name",
                        default="simleo/pyfeatures")
    parser.add_argument("-O", "--docker-out-dir", help="docker output dir",
                        default="/scratch")
    parser.add_argument("-v", "--docker-volume", action="append",
                        help="additional docker volume mapping(s)")
    parser.add_argument("-n", "--dry-run", action="store_true",
                        help="print celery args and exit")
    parser.add_argument("--limit", type=int, metavar="INT",
                        help="max number of tasks to submit")
    return parser


def main(argv):
    try:
        idx = argv.index("--")
    except ValueError:
        calc_opts = []
    else:
        calc_opts = argv[(idx + 1):]
        del argv[idx:]
    parser = make_parser()
    args = parser.parse_args(argv[1:])
    celery_m = importlib.import_module(args.celery_module)
    base_cmd = ["docker", "run", "--rm"]
    if args.user_id:
        base_cmd.extend(["-u", str(args.user_id)])
    base_cmd.extend(["-v", "%s:%s" % (args.out_dir, args.docker_out_dir)])
    for v_mapping in (args.docker_volume or []):
        base_cmd.extend(["-v", v_mapping])
    base_cmd.extend([args.docker_img, "calc"])
    base_cmd.extend(calc_opts)
    with open(args.log, "w") as fo:
        for i, (subdir_bn, avro_bn) in enumerate(iter_input(args.input_dir)):
            if args.limit and i >= args.limit:
                break
            cmd = base_cmd[:]
            in_path = os.path.join(args.input_dir, subdir_bn, avro_bn)
            docker_out_subdir = os.path.join(args.docker_out_dir, subdir_bn)
            cmd.extend([in_path, "-o", docker_out_subdir])
            tag, _ = os.path.splitext(avro_bn)
            out_subdir = os.path.join(args.out_dir, subdir_bn)
            celery_args = [
                "%s.py" % args.celery_module,
                os.path.join(out_subdir, "%s.out" % tag),
                os.path.join(out_subdir, "%s.err" % tag),
            ]
            celery_args.extend(cmd)
            if args.dry_run:
                print celery_args
            else:
                r = celery_m.main(celery_args)
                fo.write(str(r) + "\n")


if __name__ == "__main__":
    sys.exit(main(sys.argv))
